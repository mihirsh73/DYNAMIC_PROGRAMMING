Given a value N, find the number of ways to make change for N cents, if we have infinite supply of each of S = { S1, S2, .. , SM } valued coins.
long long int count(int S[], int m, int n) {

     long long int dp[m+1][n+1];
     for(int i=1; i<=m; i++)
     {
         dp[i][0]=1;
     }
     for(int j=1; j<=n; j++)
     {
         dp[0][j]=0;
     }
     dp[0][0]=1;
     for(int i=1; i<=m; i++)
     {
         for(int j=1; j<=n; j++)
         {
             
           
              if(j>=S[i-1])
             {
                 dp[i][j]= dp[i][j-S[i-1]]+ dp[i-1][j];
             }
             else{
                 dp[i][j]= dp[i-1][j];
             }
         }
     }
    
    return dp[m][n];
    }
    ////////////////////////////////////////////////////////////////////////////////////
    int count( int S[], int m, int n )         
{         
 // table[i] will be storing the number of solutions for         
 // value i. We need n+1 rows as the table is constructed         
 // in bottom up manner using the base case (n = 0)         
 int table[n+1];         
 // Initialize all table values as 0         
 memset(table, 0, sizeof(table));         
 // Base case (If given value is 0)         
 table[0] = 1;         
 // Pick all coins one by one and update the table[] values         
 // after the index greater than or equal to the value of the           TC O(N) 
 // picked coin         
 for(int i=0; i<m; i++)         
 for(int j=S[i]; j<=n; j++)         
 table[j] += table[j-S[i]];         
 return table[n];         
}
