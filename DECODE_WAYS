class Solution {
public:
   /* int find(string A, int n)
    {
        if(n==0 || n==1)
        {
            return 1;
        }
        if(A[0]=='0') return 0;
        int count=0;
        if(A[n-1]>'0')
        {                            // Recursive solution TC exponential
            count = find(A,n-1);
        }
        if(A[n-2]=='1' || A[n-2]=='2' && A[n-1]<='6')
        {
           count += find(A,n-2);    
        }
        return count;
        
    }*/
    int numDecodings(string A) {
         vector<int> dp(A.size()+1,0);
    dp[0]=1;
    if(A[0]=='0')
    dp[1]=0;
    else
    dp[1]=1;                   // dp solution
    for(int i=2;i<A.size();i++)
    {
        if(A[i-1]>'0')
        dp[i]=dp[i-1];
        if((A[i-2]=='1') || (A[i-2]=='2' && A[i-1]<'7'))
        dp[i]=(dp[i-2]+dp[i])%1000000007;
    }
    return dp[A.size()];
    //TC O(N) SC O(N);
        */
        /*int n =A.size();
        return find(A,n);*/
    }
};
